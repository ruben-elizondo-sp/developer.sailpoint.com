"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([[20505],{27374:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={id:"standard-collection-parameters",title:"Standard Collection Parameters",pagination_label:"Standard Collection Parameters",sidebar_label:"Standard Collection Parameters",sidebar_position:3,sidebar_class_name:"standardCollectionParameters",keywords:["standard collection parameters"],description:"Many endpoints in the IdentityNow API support a generic syntax for paginating, filtering and sorting the results.",tags:["Standard Collection Parameters"]},l=void 0,o={unversionedId:"api/standard-collection-parameters",id:"api/standard-collection-parameters",title:"Standard Collection Parameters",description:"Many endpoints in the IdentityNow API support a generic syntax for paginating, filtering and sorting the results.",source:"@site/products/idn/api/standard-collection-parameters.md",sourceDirName:"api",slug:"/api/standard-collection-parameters",permalink:"/idn/api/standard-collection-parameters",draft:!1,editUrl:"https://github.com/sailpoint-oss/developer-community-site/edit/main/products/idn/api/standard-collection-parameters.md",tags:[{label:"Standard Collection Parameters",permalink:"/idn/tags/standard-collection-parameters"}],version:"current",lastUpdatedBy:"GitHub Action Bot",lastUpdatedAt:1666883192,formattedLastUpdatedAt:"Oct 27, 2022",sidebarPosition:3,frontMatter:{id:"standard-collection-parameters",title:"Standard Collection Parameters",pagination_label:"Standard Collection Parameters",sidebar_label:"Standard Collection Parameters",sidebar_position:3,sidebar_class_name:"standardCollectionParameters",keywords:["standard collection parameters"],description:"Many endpoints in the IdentityNow API support a generic syntax for paginating, filtering and sorting the results.",tags:["Standard Collection Parameters"]},sidebar:"openApiSidebar",previous:{title:"Authentication",permalink:"/idn/api/authentication"},next:{title:"Rate Limiting",permalink:"/idn/api/rate-limit"}},s={},p=[{value:"Paginating Results",id:"paginating-results",level:2},{value:"Filtering Results",id:"filtering-results",level:2},{value:"Data Types",id:"data-types",level:3},{value:"Filter Syntax",id:"filter-syntax",level:3},{value:"Primitive Operators",id:"primitive-operators",level:3},{value:"Composite Operators",id:"composite-operators",level:3},{value:"Escaping Special Characters in a Filter",id:"escaping-special-characters-in-a-filter",level:3},{value:"Known Limitations",id:"known-limitations",level:3},{value:"Sorting Results",id:"sorting-results",level:3},{value:"Putting it all Together",id:"putting-it-all-together",level:2}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Many endpoints in the IdentityNow API support a generic syntax for paginating,\nfiltering and sorting the results. A collection endpoint has the following\ncharacteristics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The HTTP verb is always GET."),(0,i.kt)("li",{parentName:"ul"},"The last component in the URL is a plural noun (ex. ",(0,i.kt)("inlineCode",{parentName:"li"},"/v3/public-identities"),")."),(0,i.kt)("li",{parentName:"ul"},"The return value from a successful request is always an array of JSON objects.\nThis array may be empty if there are no results.")),(0,i.kt)("h2",{id:"paginating-results"},"Paginating Results"),(0,i.kt)("p",null,"Use the following optional query parameters to achieve pagination:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Constraints"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"limit")),(0,i.kt)("td",{parentName:"tr",align:null},"Integer specifying the maximum number of records to return in a single API call. If it is not specified, a default limit is used."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"250")),(0,i.kt)("td",{parentName:"tr",align:null},"Maxiumum of 250 records per page")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"offset")),(0,i.kt)("td",{parentName:"tr",align:null},"Integer specifying the offset of the first result from the beginning of the collection. The ",(0,i.kt)("strong",{parentName:"td"},"offset")," value is record-based, not page-based, and the index starts at 0. For example, ",(0,i.kt)("strong",{parentName:"td"},"offset=0")," and ",(0,i.kt)("strong",{parentName:"td"},"limit=20")," returns records 0-19, but ",(0,i.kt)("strong",{parentName:"td"},"offset=1")," and ",(0,i.kt)("strong",{parentName:"td"},"limit=20")," returns records 1-20."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:null},"Between 0 and the last record index.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"count")),(0,i.kt)("td",{parentName:"tr",align:null},"Boolean indicating whether a total count is returned, factoring in any filter parameters, in the ",(0,i.kt)("strong",{parentName:"td"},"X-Total-Count")," response header. The value is the total size of the collection that would be returned if ",(0,i.kt)("strong",{parentName:"td"},"limit")," and ",(0,i.kt)("strong",{parentName:"td"},"offset")," were ignored. For example, if the total number of records is 1000, then count=true would return 1000 in the ",(0,i.kt)("strong",{parentName:"td"},"X-Total-Count")," header. Because requesting a total count can have performance impact, do not send ",(0,i.kt)("strong",{parentName:"td"},"count=true")," if that value is not being used."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},"Must be ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"false"))))),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"GET ",(0,i.kt)("inlineCode",{parentName:"li"},"/v3/public-identities?limit=2")),(0,i.kt)("li",{parentName:"ul"},"GET ",(0,i.kt)("inlineCode",{parentName:"li"},"/v3/public-identities?limit=20&offset=4")),(0,i.kt)("li",{parentName:"ul"},"GET ",(0,i.kt)("inlineCode",{parentName:"li"},"/v3/public-identities?count=true"))),(0,i.kt)("h2",{id:"filtering-results"},"Filtering Results"),(0,i.kt)("p",null,"Any collection with a ",(0,i.kt)("inlineCode",{parentName:"p"},"filters")," parameter supports filtering. This means that an\nitem is only included in the returned array if the filters expression evaluates\nto true for that item. Check the available request parameters for the collection\nendpoint you are using to see if it supports filtering."),(0,i.kt)("h3",{id:"data-types"},"Data Types"),(0,i.kt)("p",null,"Filter expressions are applicable to fields of the following types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Numeric"),(0,i.kt)("li",{parentName:"ul"},"Boolean: either ",(0,i.kt)("strong",{parentName:"li"},"true")," or ",(0,i.kt)("strong",{parentName:"li"},"false")),(0,i.kt)("li",{parentName:"ul"},"Strings. Enumerated values are a special case of this."),(0,i.kt)("li",{parentName:"ul"},"Date-time. In V3, all date time values are in ISO-8601 format, as specified in\n",(0,i.kt)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc3339"},"RFC 3339 - Date and Time on the Internet: Timestamps"),".")),(0,i.kt)("h3",{id:"filter-syntax"},"Filter Syntax"),(0,i.kt)("p",null,"The V3 filter syntax is similar to, but not exactly the same as, that specified\nby the SCIM standard. These are some key differences:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A slightly different set of supported operators"),(0,i.kt)("li",{parentName:"ul"},'Case-sensitivity of operators. All V3 filter operators are in lowercase;\nspecifying "EQ" instead of "eq" is not allowed.')),(0,i.kt)("h3",{id:"primitive-operators"},"Primitive Operators"),(0,i.kt)("p",null,"These filter operators apply directly to fields and their values:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operator"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Example"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ca")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the collection-valued field contains all the listed values."),(0,i.kt)("td",{parentName:"tr",align:null},'groups ca ("Venezia","Firenze")')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"co")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the value of the field contains the specified value as a substring.(Applicable to string-valued fields only.)"),(0,i.kt)("td",{parentName:"tr",align:null},'name co "Rajesh"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"eq")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the value of the field indicated by the first operand is equal to the value specified by the second operand."),(0,i.kt)("td",{parentName:"tr",align:null},'identitySummary.id eq "2c9180846e85e4b8016eafeba20c1314"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ge")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the value of the field indicated by the first operand is greater or equal to the value specified by the second operand."),(0,i.kt)("td",{parentName:"tr",align:null},'daysUntilEscalation ge 7\xa0name ge "Genaro"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"gt")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the value of the field indicated by the first operand is greater than the value specified by the second operand."),(0,i.kt)("td",{parentName:"tr",align:null},'daysUntilEscalation gt 7\xa0name gt "Genaro"\xa0created gt 2018-12-18T23:05:55Z')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"in")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the field value is\xa0in the list of values."),(0,i.kt)("td",{parentName:"tr",align:null},'accountActivityItemId in ("2c9180846b0a0583016b299f210c1314","2c9180846b0a0581016b299e82560c1314")')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"le")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the value of the field indicated by the first operand is less or equal to the value specified by the second operand."),(0,i.kt)("td",{parentName:"tr",align:null},'daysUntilEscalation le 7\xa0name le "Genaro"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"lt")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the value of the field indicated by the first operand is\xa0less than the value specified by the second operand."),(0,i.kt)("td",{parentName:"tr",align:null},'daysUntilEscalation lt 7\xa0name lt "Genaro"\xa0created lt 2018-12-18T23:05:55Z')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ne")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the value of the field indicated by the first operand is not equal to the value specified by the second operand."),(0,i.kt)("td",{parentName:"tr",align:null},'type ne "ROLE"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pr")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the field is\xa0present, that is, not null."),(0,i.kt)("td",{parentName:"tr",align:null},"pr accountRequestInfo")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"sw")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the value of the field starts with the specified value.(Applicable to string-valued fields only.)"),(0,i.kt)("td",{parentName:"tr",align:null},'name sw "Rajesh"')))),(0,i.kt)("h3",{id:"composite-operators"},"Composite Operators"),(0,i.kt)("p",null,"These operators are applied to other filter expressions:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operator"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Example"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"and")),(0,i.kt)("td",{parentName:"tr",align:null},"True if both the filter-valued operands are true."),(0,i.kt)("td",{parentName:"tr",align:null},'startDate gt 2018 and name sw "Genaro"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"not")),(0,i.kt)("td",{parentName:"tr",align:null},"True if the filter-valued operand is false."),(0,i.kt)("td",{parentName:"tr",align:null},'not groups ca ("Venezia","Firenze")')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"or")),(0,i.kt)("td",{parentName:"tr",align:null},"True if either of the filter-valued operands are true."),(0,i.kt)("td",{parentName:"tr",align:null},'startDate gt 2018 or name sw "Genaro"')))),(0,i.kt)("h3",{id:"escaping-special-characters-in-a-filter"},"Escaping Special Characters in a Filter"),(0,i.kt)("p",null,"Certain characters must be escaped before they can be used in a filter\nexpression. For example, the following filter expression attempting to find all\nsources with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"#Employees")," will produce a 400 error:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},'/v3/sources?filters=name eq "#Employees"')),(0,i.kt)("p",null,"To properly escape this filter, do the following:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},'/v3/sources?filters=name eq "%23Employees"')),(0,i.kt)("p",null,"If you are searching for a string containing double quotes, use the following\nescape sequence:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},'/v3/sources/?filters=name eq "\\"Employees\\""')),(0,i.kt)("p",null,"The following table lists the special characters that are incompatible with\n",(0,i.kt)("inlineCode",{parentName:"p"},"filters")," and how to escape them."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Character"),(0,i.kt)("th",{parentName:"tr",align:null},"Escape Sequence"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"#"),(0,i.kt)("td",{parentName:"tr",align:null},"%23")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"%"),(0,i.kt)("td",{parentName:"tr",align:null},"%25")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"&"),(0,i.kt)("td",{parentName:"tr",align:null},"%26")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\\"),(0,i.kt)("td",{parentName:"tr",align:null},"\\","\\")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'"'),(0,i.kt)("td",{parentName:"tr",align:null},"\\",'"')))),(0,i.kt)("h3",{id:"known-limitations"},"Known Limitations"),(0,i.kt)("p",null,"Although filter expressions are a very general mechanism, individual API\nendpoints will only support filtering on a specific set of fields that are\nrelevant to that endpoint, and will frequently only support a subset of\noperations for each field. For example, an endpoint might allow filtering on the\nname field but not support use of the co operator on that field. Consult the\ndocumentation for each API endpoint to determine what fields and operators can\nbe used. Attempts to use an unsupported filter expression will result in a 400\nBad Request response."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'/v3/public-identities?filters=email eq "john.doe@example.com"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'/v3/public-identities?filters=firstname sw "john" or email sw "joe"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"not prop1 eq val1 or prop2 eq val2 and prop3 eq val3")," is equivalent to\n",(0,i.kt)("inlineCode",{parentName:"li"},"(not (prop1 eq val1)) or ((prop2 eq val2) and (prop3 eq val3))")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"not (prop1 eq val1 or prop2 eq val2) and prop3 eq val3")," is equivalent to\n",(0,i.kt)("inlineCode",{parentName:"li"},"(not ((prop1 eq val1) or (prop2 eq val2))) and (prop3 eq val3)"))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Spaces in URLs must be escaped with ",(0,i.kt)("inlineCode",{parentName:"p"},"%20"),". Most programming languages,\nframeworks, libraries, and tools will do this for you, but some won't. In the\nevent that your tool doesn't escape spaces, you will need to format your query\nas ",(0,i.kt)("inlineCode",{parentName:"p"},'/v3/public-identities?filters=email%20eq%20"john.doe@example.com"'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You must escape spaces in URLs with ",(0,i.kt)("inlineCode",{parentName:"p"},"%20"),". Most programming languages,\nframeworks, libraries, and tools do this for you, but some do not. In the\nevent that your tool does not escape spaces, you must format your query as\n",(0,i.kt)("inlineCode",{parentName:"p"},'/v3/public-identities?filters=email%20eq%20"john.doe@example.com"'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Unless explicitly noted otherwise, strings are compared lexicographically.\nMost comparisons are not case sensitive. Any situations where the comparisons\nare case sensitive will be called out.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Date-times are compared temporally; an earlier date-time is less than a later\ndate-time.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The usual precedence and associativity of the composite operators applies,\nwith ",(0,i.kt)("strong",{parentName:"p"},"not")," having higher priority than ",(0,i.kt)("strong",{parentName:"p"},"and"),", which in turn has higher\npriority than ",(0,i.kt)("strong",{parentName:"p"},"or"),". You can use parentheses to override this precedence.")))),(0,i.kt)("h3",{id:"sorting-results"},"Sorting Results"),(0,i.kt)("p",null,"Result sorting is supported with the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"sorters"),' parameter. Its syntax is\na set of comma-separated field names. You may optionally prefix each field name\nwith a "-" character, indicating that the sort is descending based on the value\nof that field. Otherwise, the sort is ascending.'),(0,i.kt)("p",null,"For example, to sort primarily by ",(0,i.kt)("strong",{parentName:"p"},"type")," in ascending order, and secondarily\nby ",(0,i.kt)("strong",{parentName:"p"},"modified date")," in descending order, use ",(0,i.kt)("inlineCode",{parentName:"p"},"sorters=type,-modified")),(0,i.kt)("h2",{id:"putting-it-all-together"},"Putting it all Together"),(0,i.kt)("p",null,"Pagination, filters, and sorters can be mixed and match to achieve the desired\noutput for a given collection endpoint. Here are some examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'/v3/public-identities?limit=20&filters=firstname eq "john"&sorters=-name'),"\nreturns the first 20 identities that have a first name of John and are sorted\nin descending order by full name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/v3/account-activities?limit=10&offset=2&sorters=-created")," sorts the results\nby descending created time, so the most recent activities appear first. The\nlimit and offset returns the 3rd page of this sorted response with 10 records\ndisplayed.")))}m.isMDXComponent=!0}}]);