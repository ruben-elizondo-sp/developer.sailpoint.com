"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([[84764],{73466:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>g,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var i=r(87462),o=(r(67294),r(3905));const s={id:"preparing-subscriber-service",title:"Preparing a Subscriber Service",pagination_title:"Preparing a Subscriber Service",sidebar_label:"Preparing a Subscriber Service",sidebar_position:2,sidebar_class_name:"preparingSubscriberService",keywords:["event","triggers","subscriber"],description:"Before you can subscribe to an event trigger, you must prepare a service that can accept incoming HTTP requests from the event trigger service.",slug:"/docs/event-triggers/preparing-subscriber-service",tags:["Event Triggers"]},n=void 0,a={unversionedId:"docs/identity-now/event-triggers/preparing-subscriber-service",id:"docs/identity-now/event-triggers/preparing-subscriber-service",title:"Preparing a Subscriber Service",description:"Before you can subscribe to an event trigger, you must prepare a service that can accept incoming HTTP requests from the event trigger service.",source:"@site/products/idn/docs/identity-now/event-triggers/preparing-a-subscriber-service.md",sourceDirName:"docs/identity-now/event-triggers",slug:"/docs/event-triggers/preparing-subscriber-service",permalink:"/idn/docs/event-triggers/preparing-subscriber-service",draft:!1,editUrl:"https://github.com/sailpoint-oss/developer-community-site/edit/main/products/idn/docs/identity-now/event-triggers/preparing-a-subscriber-service.md",tags:[{label:"Event Triggers",permalink:"/idn/tags/event-triggers"}],version:"current",lastUpdatedBy:"GitHub Action Bot",lastUpdatedAt:1666883192,formattedLastUpdatedAt:"Oct 27, 2022",sidebarPosition:2,frontMatter:{id:"preparing-subscriber-service",title:"Preparing a Subscriber Service",pagination_title:"Preparing a Subscriber Service",sidebar_label:"Preparing a Subscriber Service",sidebar_position:2,sidebar_class_name:"preparingSubscriberService",keywords:["event","triggers","subscriber"],description:"Before you can subscribe to an event trigger, you must prepare a service that can accept incoming HTTP requests from the event trigger service.",slug:"/docs/event-triggers/preparing-subscriber-service",tags:["Event Triggers"]},sidebar:"idnDocs",previous:{title:"Trigger Types",permalink:"/idn/docs/event-triggers/trigger-types"},next:{title:"Subscribing to a Trigger",permalink:"/idn/docs/event-triggers/subscribing-to-trigger"}},c={},p=[{value:"Webhook Testing Service",id:"webhook-testing-service",level:2},{value:"Native SaaS Workflows",id:"native-saas-workflows",level:2},{value:"No-code Provider",id:"no-code-provider",level:2},{value:"Custom Application",id:"custom-application",level:2}],u={toc:p};function g(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,i.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Before you can subscribe to an event trigger, you must prepare a service that\ncan accept incoming HTTP requests from the event trigger service. More\nspecifically, your client service must accept a POST request to an endpoint of\nits choosing, with the ability to parse the JSON data sent by the trigger. There\nare many ways to accomplish this, but this guide covers four of the most common\ntypes of client services you can build to handle event triggers."),(0,o.kt)("h2",{id:"webhook-testing-service"},"Webhook Testing Service"),(0,o.kt)("p",null,"There are many webhook testing websites that generate a unique URL you can use\nto subscribe to an event trigger and explore the data sent by the trigger. One\nsite is ",(0,o.kt)("a",{parentName:"p",href:"https://webhook.site."},"https://webhook.site.")," This site generates a unique URL whenever you open\nit, which you can copy and paste into the subscription configuration in\nIdentityNow. Any events that the trigger generates will be sent to this website\nfor you to analyze."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Webhook.site",src:r(62623).Z,width:"2559",height:"809"})),(0,o.kt)("p",null,"The purpose of webhook testing services is to make it easy to set up a trigger\nand see the data of the events that will eventually be sent to your production\nservice. This can help in the early development process when you explore the\ndata the event trigger sends and how to best access the data you need."),(0,o.kt)("h2",{id:"native-saas-workflows"},"Native SaaS Workflows"),(0,o.kt)("p",null,"Some SaaS vendors provide built-in workflow builders in their products so you do\nnot have to use a no-code provider. Slack, for example, has a premium\n",(0,o.kt)("a",{parentName:"p",href:"https://slack.com/help/articles/360035692513-Guide-to-Workflow-Builder"},"workflow builder"),"\nfeature that generates a unique URL you can use to configure your subscription.\nSlack's workflow builder can then listen for events sent by your trigger and\nperform Slack specific actions on the data, like sending a user a message when\nhis or her access request is approved."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Slack workflow",src:r(29501).Z,width:"1020",height:"669"})),(0,o.kt)("h2",{id:"no-code-provider"},"No-code Provider"),(0,o.kt)("p",null,"No-code/low-code providers, like Zapier and Microsoft Power Automate, make it\neasy to consume event triggers and perform actions based on the event data. They\nare popular solutions for those looking to prototype or quickly create automated\nbusiness processes, and they cater to novices and advanced users alike. Each\nno-code provider has documentation about how to create a new workflow and\nsubscribe to an event trigger or webhook, so you must find the relevant\ndocumentation for your no-code provider to learn how to set one up. Zapier has\nthe ability to configure a webhook action that generates a unique URL you can\nconfigure in your event trigger subscription."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Zapier webhook",src:r(82549).Z,width:"1106",height:"936"})),(0,o.kt)("h2",{id:"custom-application"},"Custom Application"),(0,o.kt)("p",null,"A custom application is one you write in a language of your choosing and host in\nyour own infrastructure, cloud, or on-premise. This is the most advanced option\nfor implementing an event trigger client service. Although it requires a great\ndeal of skill and knowledge to build, deploy, and operate your own service that\ncan consume requests over HTTP, a custom application offers the most power and\nflexibility to implement your use cases. You can learn more about custom\napplications by checking out our\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sailpoint-oss/event-trigger-examples"},"Event Trigger Example Application"),"."))}g.isMDXComponent=!0},29501:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/slack-workflow-5b29c40e5f68a774b29b4a95699e5d93.png"},62623:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/webhook-site-b3ff15d1022cbd53c27aa731f9cbea40.png"},82549:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/zapier-webhook-67e786bdc875a9aaeb30d44126667915.png"}}]);